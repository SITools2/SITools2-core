<?xml version="1.0" encoding="UTF-8"?>
<!-- =================================== == Copyright 2010-2014 CNES - CENTRE 
	NATIONAL d'ETUDES SPATIALES == == This file is part of SITools2. == == SITools2 
	is free software: you can redistribute it and/or modify == it under the terms 
	of the GNU General Public License as published by == the Free Software Foundation, 
	either version 3 of the License, or == (at your option) any later version. 
	== == SITools2 is distributed in the hope that it will be useful, == but 
	WITHOUT ANY WARRANTY; without even the implied warranty of == MERCHANTABILITY 
	or FITNESS FOR A PARTICULAR PURPOSE. See the == GNU General Public License 
	for more details. == == You should have received a copy of the GNU General 
	Public License == along with SITools2. If not, see <http://www.gnu.org/licenses/>. 
	==================================== -->
<target name="audit" description="Generates a report of code convention violations.">

	<delete dir="${checkstyle.reports.dir}" />
	<delete dir="${pmd.reports.dir}" />
	<delete dir="${cpd.reports.dir}" />
	<delete dir="${findbugs.reports.dir}" />

	<mkdir dir="${checkstyle.reports.dir}" />
	<mkdir dir="${pmd.reports.dir}" />
	<mkdir dir="${cpd.reports.dir}" />
	<mkdir dir="${findbugs.reports.dir}" />

	<!-- Audit CHECKSTYLE -->
	<checkstyle config="${audit.checkstyle.rules.dir}/AKKA-CheckStyle.xml"
		failureProperty="checkstyle.failure" failOnViolation="false">
		<formatter type="xml"
			tofile="${checkstyle.reports.dir}/checkstyle_report.xml" />
		<fileset dir="${src.dir}" includes="**/*.java" />
	</checkstyle>
	<xslt in="${checkstyle.reports.dir}/checkstyle_report.xml" out="${checkstyle.reports.dir}/checkstyle_report.html"
		style="${audit.xsl.dir}/${checkstyle.xsl}" />

	<!-- Audit PMD -->
	<pmd rulesetfiles="${audit.pmd.rules.dir}/AKKA-PMD.xml">
		<formatter type="xml" toFile="${pmd.reports.dir}/pmd_report.xml" />
		<fileset dir="${src.dir}">
			<include name="**/*.java" />
		</fileset>
	</pmd>

	<!-- Audit CPD -->
	<cpd minimumTokenCount="100" outputFile="${cpd.reports.dir}/cpd_report.xml"
		format="xml">
		<fileset dir="${src.dir}">
			<include name="**/*.java" />
		</fileset>
	</cpd>
	
	<!-- Audit FindBugs -->
	<findbugs home="${findbugs.dir}" output="xml"
		outputFile="${findbugs.reports.dir}/findbugs.xml">

		<sourcePath path="${src.dir}"></sourcePath>
		<class location="fr.cnes.sitools.core.jar"></class>

	</findbugs>
</target>

<target name="checkstyle-nightly" depends="audit" if="checkstyle.failure"
	description="Sends email if checkstyle detected code conventions violations.">

	<!-- use your own server and email addresses below. See Ant documentation 
		for details -->

	<mail from="ulisse-sad-team@akka.eu" tolist="ulisse-sad-team@akka.eu"
		mailhost="mailbox.some.domain" subject="Checkstyle violation(s) in project ${project.name}"
		files="${out.audit.dir}/checkstyle_report.html" />

</target>

<!-- Classpath of the files to instrument -->
<path id="instrument.classpath">
	<fileset dir="${out.classes.dir}">
		<include name="**/*.class" />
	</fileset>
</path>

<!-- Defines the directory where to find the instrumented classes -->
<path id="instrumented.classpath">
	<pathelement location="${instrumented.dir}" />
</path>

<target name="instrumentClasses" depends="compilation">
	<delete dir="${cobertura.reports.dir}" />
	<mkdir dir="${cobertura.reports.dir}" />
	<path refid="test" />
	<cobertura-instrument todir="${instrumented.dir}"
		datafile="cobertura.ser">
		<ignore regex="org.apache.log4j.*" />
		<fileset dir="${out.classes.dir}">
			<include name="**/*.class" />
			<exclude name="**/*Test.class" />
		</fileset>
	</cobertura-instrument>
</target>

<target name="coverage" depends="instrumentClasses, execute-tests">
	<cobertura-report format="html" srcdir="${src.dir}"
		destdir="${cobertura.reports.dir}" datafile="cobertura.ser" />
	<cobertura-report format="xml" srcdir="${src.dir}"
		destdir="${cobertura.reports.dir}" datafile="cobertura.ser" />
</target>

<target name="generate-webapp-debug" description="Deploiement local du WAR de l'application WEB"
	depends="deploy-jar-projet">

	<delete dir="${web.dir}/WEB-INF/lib" />
	<mkdir dir="${web.dir}/WEB-INF/lib" />
	<copy file="${dist.lib.dir}/portal.jar" todir="${web.dir}/WEB-INF/lib" />
</target>


<!-- Classpath pour la génération des index des pages HTML utilisées par 
	Java-Help -->
<path id="java.help.classpath">
	<path refid="compile.classpath" />
	<pathelement location="${lib.dir}" />
</path>

<target name="index-help">
	<echo>Creating help index base</echo>
	<mkdir dir="${out.help.dir}" />
	<delete includeEmptyDirs="true">
		<fileset dir="${out.help.dir}">
			<include name="**/*" />
		</fileset>
	</delete>
	<java classname="com.sun.java.help.search.Indexer" classpathref="java.help.classpath"
		dir="${out.help.dir}" fork="true">
		<arg value="html" />
	</java>
</target>

<target name="make-distribution"
	description="Deploiement local de l'application selon l'architecture odysseus"
	depends="unzip-lib-dz">
	<mkdir dir="${distribution.dir}" />
	<mkdir dir="${distribution.lib.dir}" />

	<copy file="${dist.lib.dir}/${project.name}.jar" todir="${distribution.lib.dir}" />

	<copy file="${dist.bin.dir}/startSitools.sh" todir="${distribution.dir}" />

	<copy file="${dist.conf.dir}/sitools.properties" todir="${distribution.properties.dir}" />

</target>

<!-- dezip des libs pour supprimer les META-INF et rezipper fat-lib -->
<target name="unzip-lib-dz" depends="clean-lib-dz">
	<unzip dest="lib-dz">
		<fileset file="${lib.dir}/.....jar">
		</fileset>
	</unzip>
	<delete includeEmptyDirs="true">
		<fileset file="lib-dz/META-INF/MANIFEST.MF" />
	</delete>
</target>

<target name="clean-lib-dz">
	<mkdir dir="lib-dz" />
	<delete includeEmptyDirs="true">
		<fileset dir="lib-dz" defaultexcludes="yes">
			<include name="**/*" />
			<exclude name="readme.txt" />
			<exclude name="cvs" />
		</fileset>
	</delete>
	<mkdir dir="lib-dz" />
</target>

<target name="dos2ux" description="Mise en forme des fichiers texte au format Unix">
	<fixcrlf srcdir="${src.dir}" eol="lf" eof="remove" includes="**/*.java" />
	<!-- <fixcrlf srcdir="${test.dir}" eol="lf" eof="remove" includes="**/*.java"/> -->
	<fixcrlf srcdir="${conf.dir}" eol="lf" eof="remove" includes="**/*.properties" />
	<fixcrlf srcdir="${conf.dir}" eol="lf" eof="remove" includes="**/*.sh" />
</target>

<!-- ================================================================================== 
	================ NE RIEN MODIFIER EN DESSOUS DE CETTE LIGNE !!! ================== 
	================================================================================== -->

<!-- ========================================================================================= 
	init : Target d'initialisation. Elle doit etre appelee par toute les autres 
	targets. ========================================================================================= -->
<target name="init">
	<!-- Permet d'utiliser les valeurs ${TSTAMP}, ${DSTAMP}, ... dans les targets 
		si necessaires -->
	<tstamp />

	<!-- Affichage des parametres courant lors de l'execution de la tache Ant. -->
	<echo message="--------- ${project.fullname} ${project.version} ---------" />
	<echo message="" />

	<echo message="java.class.path    = ${java.class.path}" />
	<echo message="" />
	<echo message="java.home          = ${java.home}" />
	<echo message="user.home          = ${user.home}" />
	<echo message="" />
	<echo message="basedir            = ${basedir}" />
	<echo message="" />
	<echo message="compile.classpath  = ${toString:compile.classpath}" />

	<!-- Definition des filtres qui permettront de remplacer des token dans 
		les fichiers sources -->
	<!-- Les tokens seront de la forme suivante : @token@ dans les sources. 
		Et ils seront -->
	<!-- automatiquement remplaces par la valeur definie ci-dessous par Ant 
		lors de l'execution -->
	<!-- d'une tache ayant comme parametre : filtering="on" -->
	<filter token="project" value="${project.fullname}" />
	<filter token="version" value="${project.version}" />
	<filter token="year" value="${year}" />
	<filter token="author" value="${author}" />
	<filter token="owner" value="${owner}" />
</target>

<!-- ========================================================================================= 
	clean : Supprime les fichiers generes et les fichiers bak et de log. ========================================================================================= -->
<target name="clean">
	<!-- Supprime tous les fichiers temporaires de l'arborescance projet -->
	<delete>
		<fileset dir=".">
			<patternset refid="all.tmp.files" />
		</fileset>
	</delete>

	<!-- Vide le repertoire "out" -->
	<delete dir="${out.classes.dir}" />
	<mkdir dir="${out.classes.dir}" />
</target>

<!-- ========================================================================================= 
	prepare : Prepare le repertoire "out" en y copiant les fichiers sources filtres. 
	========================================================================================= -->
<target name="prepare">
	<!-- Creation des repertoires dist.dir et out.classes.dir -->
	<mkdir dir="${out.classes.dir}" />
	<mkdir dir="${lib.dir}" />

	<mkdir dir="${dist.dir}" />
</target>

<!-- ========================================================================================= 
	compile : compile les sources du projet ========================================================================================= -->
<target name="compile">
	<javac srcdir="${src.dir}" destdir="${out.classes.dir}" debug="${debug}"
		deprecation="${deprecation}" optimize="${optimize}" encoding="${encoding}"
		includeAntRuntime="false">

		<classpath>
			<path refid="compile.classpath" />
		</classpath>
	</javac>

	<!-- Copie les fichiers de resource qui doivent etre dans le repertoire 
		classes -->
	<copy todir="${out.classes.dir}">
		<fileset dir="${src.dir}">
			<patternset refid="all.resource.files" />
		</fileset>
	</copy>

	<!-- Copie les fichiers de resource qui doivent etre dans le repertoire 
		classes -->
	<!--copy todir="${out.classes.dir}"> <fileset dir="${src.dir}"> <patternset 
		refid="all.resource.files"/> </fileset> <fileset dir="${conf.properties.dir}"> 
		<patternset refid="all.resource.files"/> </fileset> </copy -->
</target>


<!-- ========================================================================================= 
	generate-todo : genere la to-do list dans le repertoire ${out.dir}/todo ========================================================================================= -->
<target name="generate-todo">
</target>


<!-- ========================================================================================= 
	audit-code : Audit du code afin de valider le respect des normes de codage 
	========================================================================================= -->
<target name="audit-code">
	<!-- Supprime tous les fichiers d'audit precedants -->
	<delete>
		<fileset dir="${audit.out.dir}" includes="**/*" />
	</delete>

</target>




<!-- ========================================================================================= 
	test-init : Creation de l'arborescence pour les tests ========================================================================================= -->
<target name="test-init">
	<mkdir dir="${test.dir}" />
	<delete dir="${test.reports.data.dir}" />
	<delete dir="${test.reports.dir}" />
	<mkdir dir="${test.reports.dir}" />
	<mkdir dir="${test.reports.data.dir}" />
</target>

<!-- ========================================================================================= 
	test-compile : Compilation des TestCase JUnit et des classes de tests ========================================================================================= -->
<target name="test-compile">
	<!-- Compile tests -->
	<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
		debug="${debug}" deprecation="${deprecation}" optimize="${optimize}"
		includeAntRuntime="false">

		<classpath>
			<path refid="test.classpath" />
		</classpath>
	</javac>

	<!-- Copie les ressources des tests dans le repertoire ${test.conf.dir} -->
	<copy todir="${test.conf.dir}" includeemptydirs="false">
		<fileset dir="${test.src.dir}" excludes="**/*.java" />
	</copy>
</target>

<property name="test.last.failed.file" location="${test.dir}/.lasttestsfailed" />

<target name="update-test-properties"
	description="Mise à jour du fichier de properties à partir du fichier build-test.properties">


	<macrodef name="fill_properties_for_test">
		<attribute name="propertyName" default="Tests.xxx" />
		<attribute name="propertyValue" default="" />
		<sequential>
			<propertyfile file="./sitools.properties">
				<entry key="@{propertyName}" value="@{propertyValue}"
					operation="=" default="false" />
			</propertyfile>
			<propertyfile file="${conf.properties.dir}/sitools.properties">
				<entry key="@{propertyName}" value="@{propertyValue}"
					operation="=" default="false" />
			</propertyfile>
		</sequential>
	</macrodef>
	<!-- postgresql -->
	<fill_properties_for_test propertyName="Tests.PGSQL_DATABASE_DRIVER"
		propertyValue="${Tests.PGSQL_DATABASE_DRIVER}" />
	<fill_properties_for_test propertyName="Tests.PGSQL_DATABASE_URL"
		propertyValue="${Tests.PGSQL_DATABASE_URL}" />
	<fill_properties_for_test propertyName="Tests.PGSQL_DATABASE_USER"
		propertyValue="${Tests.PGSQL_DATABASE_USER}" />
	<fill_properties_for_test propertyName="Tests.PGSQL_DATABASE_PASSWORD"
		propertyValue="${Tests.PGSQL_DATABASE_PASSWORD}" />
	<!-- Mysql -->
	<fill_properties_for_test propertyName="Tests.MYSQL_DATABASE_DRIVER"
		propertyValue="${Tests.MYSQL_DATABASE_DRIVER}" />
	<fill_properties_for_test propertyName="Tests.MYSQL_DATABASE_URL"
		propertyValue="${Tests.MYSQL_DATABASE_URL}" />
	<fill_properties_for_test propertyName="Tests.MYSQL_DATABASE_USER"
		propertyValue="${Tests.MYSQL_DATABASE_USER}" />
	<fill_properties_for_test propertyName="Tests.MYSQL_DATABASE_PASSWORD"
		propertyValue="${Tests.MYSQL_DATABASE_PASSWORD}" />
	<!-- HSQLDB -->
	<fill_properties_for_test propertyName="Tests.HSQLDB_DATABASE_DRIVER"
		propertyValue="${Tests.HSQLDB_DATABASE_DRIVER}" />
	<fill_properties_for_test propertyName="Tests.HSQLDB_DATABASE_URL"
		propertyValue="${Tests.HSQLDB_DATABASE_URL}" />
	<fill_properties_for_test propertyName="Tests.HSQLDB_DATABASE_USER"
		propertyValue="${Tests.HSQLDB_DATABASE_USER}" />
	<fill_properties_for_test propertyName="Tests.HSQLDB_DATABASE_PASSWORD"
		propertyValue="${Tests.HSQLDB_DATABASE_PASSWORD}" />
	<!-- MongoDB -->
	<fill_properties_for_test propertyName="Tests.MONGODB_DATABASE_URL"
		propertyValue="${Tests.MONGODB_DATABASE_URL}" />
	<fill_properties_for_test propertyName="Tests.MONGODB_DATABASE_USER"
		propertyValue="${Tests.MONGODB_DATABASE_USER}" />
	<fill_properties_for_test propertyName="Tests.MONGODB_DATABASE_PASSWORD"
		propertyValue="${Tests.MONGODB_DATABASE_PASSWORD}" />
	<fill_properties_for_test propertyName="Tests.MONGODB_DATABASE_PORT"
		propertyValue="${Tests.MONGODB_DATABASE_PORT}" />
	<fill_properties_for_test propertyName="Starter.CHECK_STORES_AT_STARTUP"
		propertyValue="${Tests.CHECK_STORES_AT_STARTUP}" />
		
	<fill_properties_for_test propertyName="Starter.org.restlet.engine.loggerFacadeClass"
		propertyValue="${Tests.LOGGER_FACADE_CLASS}" />





</target>




<!-- ========================================================================================= 
	test : Execution des Tests JUnit et generation du rapport de test ========================================================================================= -->
<target name="test"
	description="Execution des tests JUnit et generation du rapport de test">
	<echo level="info" message="" />

	<!-- Execute les tests JUnit -->
	<junit printsummary="yes" errorProperty="test.failed"
		failureProperty="test.failed" fork="yes" dir="${basedir}">
		<sysproperty key="net.sourceforge.cobertura.datafile"
			file="cobertura.ser" />
		<jvmarg value="-Djava.awt.headless=true" />
		<classpath refid="instrumented.classpath" />
		<classpath refid="test.classpath" />
		<formatter type="brief" usefile="false" />
		<formatter type="xml" />
		<test name="${testcase}" if="testcase" />
		<batchtest todir="${test.reports.data.dir}" unless="testcase">
			<fileset dir="${test.classes.dir}" includes="**/Test*.class"
				excludes="**/Abstract*.class **/TestRunner.class" />
			<fileset dir="${test.classes.dir}" includes="**/*Test.class"
				excludes="**/Abstract*.class" />
			<fileset dir="${test.classes.dir}" includes="**/*TestCase.class"
				excludes="**/Abstract*.class" />
		</batchtest>

	</junit>

	<junitreport todir="${test.reports.data.dir}">
		<fileset dir="${test.reports.data.dir}">
			<include name="TEST-*.xml" />
		</fileset>
		<report format="frames" todir="${test.reports.dir}" />
	</junitreport>

	<echo message="last build failed tests" file="${test.last.failed.file}" />
	<fail if="test.failed">
		Unit tests failed. Check log or reports for details
	</fail>

	<!-- Remove test failed file, as these tests succeeded -->
	<delete file="${test.last.failed.file}" />
</target>

<target name="junit-report">
	<junitreport todir="${test.reports.data.dir}">
		<fileset dir="${test.reports.data.dir}">
			<include name="TEST-*.xml" />
		</fileset>
		<report format="frames" todir="${test.reports.dir}" />
	</junitreport>
</target>

<!-- ========================================================================================= 
	jar : Generation du JAR de l'application ========================================================================================= -->
<target name="jar">

	<!-- Creation du repertoire lib -->
	<mkdir dir="${out.jar.dir}" />

	<!-- Creation d'un repertoire temporaire -->
	<mkdir dir="${out.dir}/tmp" />

	<!-- Copie le fichier manifest afin de remplacer le token @version@ par 
		le numero de version -->
	<copy file="${conf.jar.dir}/manifest" todir="${out.dir}/tmp"
		filtering="on" />
	<copy file="${conf.jar.dir}/manifest.test" todir="${out.dir}/tmp"
		filtering="on" />

	<!-- Rajoute le classpath au Manifest -->
	<echo message="Root directory : ${ROOT_DIRECTORY}." />
	<echo message="Compile classpath : ${toString:compile.classpath}" />
	<pathconvert property="relative.classpath" refid="compile.classpath"
		pathsep=" ">
		<!-- <globmapper from="${ROOT_DIRECTORY}*" to="../../*"/> -->
	</pathconvert>
	<echo message="Relative classpath : ${relative.classpath}" />


	<!-- Rajoute la liste des extensions -->
	<path id="ext.classpath">
		<fileset dir="ext" includes="**/*.jar" />
	</path>
	<pathconvert property="relative.classpath.ext" refid="ext.classpath"
		pathsep=" ">
		<!-- <globmapper from="${ROOT_DIRECTORY}*" to="../../*" /> -->
	</pathconvert>
	<echo message="Extension classpath : ${toString:ext.classpath}" />
	<echo message="Extension classpath (relative) : ${relative.classpath.ext}" />
	<echo file="${out.dir}/tmp/manifest" append="true"
		message='Class-Path: . ${relative.classpath.ext}  ${relative.classpath}'></echo>


	<replace file="${out.dir}/tmp/manifest" token="\" value='/' />
	<replace file="${out.dir}/tmp/manifest" token="${ROOT_DIRECTORY}"
		value='../..' />


	<!-- Generation du fichier JAR -->
	<jar jarfile="${out.jar.dir}/${project.name}.jar" manifest="${out.dir}/tmp/manifest">
		<fileset dir="${out.classes.dir}" excludes="**/Test*.class, **/*Test.class **/*Helper" />
		<metainf dir="./src/META-INF">
			<include name="**/*Helper" />
		</metainf>
	</jar>



	<!-- sans manifest - avec le contenu de lib-dz <zip destfile="${out.jar.dir}/${project.name}-no-manifest.jar" 
		> <fileset dir="${out.classes.dir}" excludes="**/Test*.class, **/*Test.class"/> 
		<fileset dir="lib-dz"/> </zip> -->

	<!-- supprime le repertoire temporaire -->
	<delete dir="${out.dir}/tmp" />
</target>

<target name="jar-test">

	<!-- Creation d'un repertoire temporaire -->
	<mkdir dir="${out.dir}/tmp" />

	<copy file="${conf.jar.dir}/manifest.test" todir="${out.dir}/tmp"
		filtering="on" />

	<pathconvert property="relative.classpath" refid="test.classpath"
		pathsep=" ">
		<mapper>
			<globmapper from='${ROOT_DIRECTORY}/*' to="../../*"
				handledirsep="true" />
		</mapper>
	</pathconvert>
	<echo file="${out.dir}/tmp/manifest.test" append="true"
		message='Class-Path: . ${project.name}.jar ${relative.classpath}'></echo>
	<replace file="${out.dir}/tmp/manifest.test" token="\" value='/' />

	<!-- Generation du fichier JAR pour les tests -->
	<jar jarfile="${out.jar.dir}/${project.test.name}.jar" manifest="${out.dir}/tmp/manifest.test">
		<fileset dir="${test.classes.dir}" excludes="**/*Helper" />
		<fileset dir="${test.conf.dir}" />
		<metainf dir="./src/META-INF">
			<include name="**/*Helper" />
		</metainf>
	</jar>

	<!-- supprime le repertoire temporaire -->
	<delete dir="${out.dir}/tmp" />

</target>

<!-- ========================================================================================= 
	signed-jar : Signature du JAR genere de l'application ========================================================================================= -->
<target name="signed-jar">
	<signjar jar="${dist.lib.dir}/${project.name}.jar" alias="${sign.alias}"
		storepass="${sign.storepass}" />
</target>

<!-- ========================================================================================= 
	clean-dist : Supprime le répertoire dist afin de refaire une distribution 
	complète. ========================================================================================= -->
<target name="clean-dist">

	<delete dir="${dist.dir}" />

	<!-- Creation du repertoire dist.dir -->
	<mkdir dir="${dist.dir}" />

</target>

<!-- ========================================================================================= 
	deploy-jar : Deploiement du JAR de l'application non WEB et des fichiers 
	composant la distribution du projet. ========================================================================================= -->
<target name="deploy-jar">

	<!-- Deploiement du repertoire des scripts de l'application -->
	<echo message="--- Deploiement des fichiers scripts de l'application ---" />
	<copy todir="${dist.bin.dir}" filtering="on">
		<fileset dir="${conf.bin.dir}">
			<exclude name="**/.svn/**" />
		</fileset>
	</copy>

	<!-- Deploiement du repertoire des fichiers properties "externes" de l'application -->
	<echo message="--- Deploiement des fichiers proprietes ---" />
	<copy todir="${dist.conf.dir}">
		<fileset dir="${conf.properties.dir}">
			<exclude name="**/.svn/**" />
		</fileset>
	</copy>

	<!-- Deploiement du repertoire des librairies "externes" de l'application -->
	<echo message="--- Deploiement des librairies 'externes' de l'application ---" />
	<copy todir="${dist.lib.dir}">
		<fileset dir="${lib.dir}">
			<exclude name="**/.svn/**" />
		</fileset>
	</copy>

	<!-- Deploiement du JAR de l'application -->
	<echo message="- Deploiement du JAR de l'application -" />
	<copy todir="${dist.lib.dir}">
		<fileset dir="${out.jar.dir}" />
	</copy>
	<copy todir=".">
		<fileset dir="${out.jar.dir}" />
	</copy>

</target>

<!-- ========================================================================================= 
	war : Generation du WAR de l'application WEB ========================================================================================= -->
<target name="war">
	<!-- Creation d'un repertoire temporaire -->
	<mkdir dir="${out.dir}/tmp" />

	<!-- Copie le fichier manifest afin de remplacer le token @version@ par 
		le numero de version -->
	<copy file="${conf.war.dir}/manifest" todir="${out.dir}/tmp"
		filtering="on" />
	<copy file="${conf.war.dir}/web.xml" todir="${out.dir}/tmp"
		filtering="on" />

	<!-- Generation du fichier WAR -->
	<war destfile="${dist.dir}/${webapps.name}.war" webxml="${out.dir}/tmp/web.xml"
		manifest="${out.dir}/tmp/manifest">

		<classes dir="${conf.properties.dir}" defaultexcludes="yes"
			excludes=".nbattrs" />

		<!-- Ajout du jar des sources du projet -->
		<lib dir="${out.jar.dir}" />
		<!-- Ajout du jar des librairies utilisees -->
		<lib dir="${lib.dir}" />

		<fileset dir="${web.dir}" defaultexcludes="yes" excludes=".nbattrs" />
	</war>

	<!-- supprime le repertoire temporaire -->
	<delete dir="${out.dir}/tmp" />
</target>

<!-- ========================================================================================= 
	deploy-war : Deploiement du WAR de l'application WEB. Afin de pouvoir executer 
	cette target le moteur de JSP/Servlet doit etre stoppe, sans quoi la suppression 
	de l'ancienne version de la WebApp echouera. ========================================================================================= -->
<target name="deploy-war">

	<echo message="--- Deploiement desactive ... utilisez Sniff ! ---" />

	<!-- Suppression d'une eventuelle ancienne version de la WebApp -->
	<!-- <echo message="- Nettoie la WebApp -"/> <delete dir="${deploy.webapps.dir}"/> -->

	<!-- Deploiement du fichier WAR -->
	<!-- <echo message="- Deploiement du fichier WAR -"/> <unwar src="${dist.dir}/${webapps.name}.war" 
		dest="${deploy.webapps.dir}"> </unwar> -->

	<!-- Deploiement du repertoire des fichiers XML de l'application -->
	<!-- <echo message="- Deploiement des fichiers XML -"/> <copy todir="${dist.conf.dir}" 
		filtering="on"> <fileset dir="${conf.xml.dir}" /> </copy> -->

	<!-- Deploiement du repertoire des scripts de l'application -->
	<!-- <echo message="- Deploiement des fichiers scripts de l'application 
		-"/> <copy todir="${dist.bin.dir}" filtering="on"> <fileset dir="${conf.bin.dir}"/> 
		</copy> -->
</target>

<!-- ========================================================================================= 
	sources : genere un ZIP des sources Java du projet ========================================================================================= -->
<target name="sources">
	<zip zipfile="${dist.dir}/${project.name}-src-${project.version}-${DSTAMP}.zip"
		basedir="${out.src.dir}" />

	<!-- Suppression du repertoire out.src.dir -->
	<delete dir="${out.src.dir}" />
</target>

<!-- ========================================================================================= 
	javadoc : genere un ZIP de la javadoc du projet ========================================================================================= -->

<path id="javadoc">
	<pathelement location="${ROOT_DIRECTORY}/workspace/fr.cnes.sitools.core/src" />
	<pathelement
		location="${ROOT_DIRECTORY}/workspace/fr.cnes.sitools.extensions/src" />
	<pathelement
		location="${ROOT_DIRECTORY}/workspace/libraries/javax.measure_0.9.5/src" />
</path>

<target name="javadoc">

	<!-- Suppression de l'ancien repertoire out.javadoc.dir -->
	<delete dir="${out.javadoc.dir}/sources" />

	<!-- Creation du repertoire out.javadoc.dir -->
	<mkdir dir="${out.javadoc.dir}/sources" />

	<!-- Generation de la javadoc du projet -->
	<javadoc 
		sourcepathref="javadoc" 
		packagenames="${project.packagenames}.*"
		destdir="${out.javadoc.dir}/sources" 
		author="true"
		public="true"
		version="true"
		use="true"
		windowtitle="${project.fullname} ${project.version}"
		doctitle="${project.fullname} ${project.version}"
		bottom="Copyright &amp;copy; ${year} ${owner}. All Rights Reserved.">
		<classpath>
			<path>
				<fileset dir="${cots.dir}/restlet-2.0.5-patched">
					<include name="**/*.jar" />
				</fileset>
			</path>
			<path>
				<fileset dir="${ROOT_DIRECTORY}/workspace/libraries">
					<include name="**/*.jar" />
				</fileset>
			</path>
			<path>
				<fileset dir="${ROOT_DIRECTORY}/workspace/org.restlet.ext.solr">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</classpath>
	</javadoc>

	<!-- Creation du ZIP contenant la javadoc du projet -->
	<zip zipfile="${dist.dir}/${project.name}-doc-${project.version}.zip"
		basedir="${out.javadoc.dir}" />

	<!-- Suppression du repertoire out.javadoc.dir -->
	<!-- delete dir="${out.javadoc.dir}"/ -->
</target>

<target name="javadoc-tests">

	<!-- Suppression de l'ancien repertoire out.javadoc.dir -->
	<delete dir="${out.javadoc.dir}/tests" />

	<!-- Creation du repertoire out.javadoc.dir -->
	<mkdir dir="${out.javadoc.dir}/tests" />

	<!-- Generation de la javadoc du projet -->
	<javadoc sourcepath="${test.src.dir}" packagenames="${project.packagenames}.*"
		destdir="${out.javadoc.dir}/tests" author="true" public="true"
		version="true" use="true" windowtitle="${project.fullname} ${project.version}"
		doctitle="${project.fullname} ${project.version}" bottom="Copyright &amp;copy; ${year} ${owner}. All Rights Reserved.">
		<link href="http://localhost:8182/sitools/developer/javadoc"
			packagelistloc="." />
		<link offline="true" href="http://www.restlet.org/documentation/2.0/jse/api/"
			packagelistloc="${cots.dir}/restlet-jse-2.0snapshot/docs/api" />
		<link offline="true" href="http://xstream.codehaus.org"
			packagelistloc="http://xstream.codehaus.org/javadoc/" />
		<link offline="true" href="http://www.junit.org/" packagelistloc="${cots.dir}/junit/junit4.8.2/javadoc" />
		<classpath>
			<pathelement path="${java.class.path}" />
			<pathelement path="${servlet.jar}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
			<fileset dir="${cots.dir}/restlet-2.0.5-patched">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</classpath>
	</javadoc>

	<!-- Creation du ZIP contenant la javadoc du projet -->
	<zip
		zipfile="${dist.dir}/${project.name}-doc-tests-${project.version}-${DSTAMP}.zip"
		basedir="${out.javadoc.dir}/tests" />

	<!-- Suppression du repertoire out.javadoc.dir -->
	<!-- delete dir="${out.javadoc.dir}"/ -->
</target>

<target name="copy-conf-test-data"
	description="Copie la configuration de référence des données de test dans le répertoire configuration du serveur">
	<mkdir dir="${root.data.dir}" />
	<copy todir="${root.data.dir}" includeemptydirs="true">
		<fileset dir="${test.data.dir}" />
	</copy>
</target>

<!-- Ajoute le texte de licence au début de chaque fichier -->
<target name="replace_headers">
	<loadfile property="javaheader" srcFile="${conf.dir}/licences/header_GPLv3.txt" />
	<replaceregexp match="(/\*.*\*/.*)??^package " flags="sm"
		replace="${javaheader}${line.separator}package ">
		<fileset dir="src">
			<include name="**/*.java" />
		</fileset>
	</replaceregexp>
</target>

<!-- Supprime le texte de licence au début de chaque fichier -->
<target name="remove_headers">
	<replaceregexp match="(/\*.*\*/.*)??^package " flags="sm"
		replace="package ">
		<fileset dir="src">
			<include name="**/*.java" />
		</fileset>
	</replaceregexp>
</target>

<!-- TARGETS POUR LE DEPLOIEMENT DE SITOOLS SUR SOURCEFORGE -->
<target name="generate_tar_gz">
	<echo message="Generate tar gz : ${deploy.sf.tar_gz_filename}" />
	<echo message="From folder : ${deploy.sf.basedir}" />
	<tar destfile="${deploy.sf.tar_gz_filename}" compression="gzip"
		basedir="${deploy.sf.basedir}" />
</target>

<target name="generate_md5">
	<checksum file="${deploy.sf.tar_gz_filename}" forceOverwrite="yes" />
	<checksum file="${deploy.sf.tar_gz_filename}" verifyProperty="isMD5ok" />
</target>

<!-- ========================================================================================= 
	TARGETS POUR LES TESTS JMETER ========================================================================================= -->

<!-- <target name="jmeter-init"> <echo message="[init] jmeter = ${jmeter}" 
	/> <mkdir dir="jmeterExample/results" /> <delete includeemptydirs="true"> 
	<fileset dir="${test.jMeter.dir}/results" includes="**/*" /> </delete> </target> 
	<target name="jmeter-tests" depends="jmeter-init" description="launch jmeter 
	load tests"> <echo message="[Running] jmeter tests..." /> <jmeter jmeterhome="${jmeter}" 
	resultlogdir="${test.jMeter.dir}/results"> <testplans dir="${test.jMeter.dir}/plans" 
	includes="*.jmx" excludes="PlanDeTravail.jmx" /> </jmeter> </target> <target 
	name="jmeter-report"> <xslt basedir="${test.jMeter.dir}/results" destdir="${test.jMeter.dir}/results/html" 
	includes="*.jtl" style="${jmeter}/extras/jmeter-results-detail-report_21.xsl" 
	/> </target> -->


<!-- ========================================================================================= 
	TARGETS POUR VALIDATION JSLINT ========================================================================================= -->
<!-- <target name="jslint" depends="jslint-user, jslint-admin"/> -->

<!-- ========================================================================================= 
	TARGETS POUR VALIDATION JSLINT USER ========================================================================================= -->

<!-- <target name="jslint-user-init"> -->
<!-- <echo message="[init] jslint = ${jslint}" /> -->
<!-- <mkdir dir="${report-client-user.dir}" /> -->
<!-- <delete includeemptydirs="true"> -->
<!-- <fileset dir="${report-client-user.dir}" includes="**/*" /> -->
<!-- </delete> -->
<!-- </target> -->
<!---->
<!-- <target name="jslint-user" depends="jslint-user-init"> -->
<!-- <echo message="[Running] jsLint validation tests on Folder ${client-user.dir}" 
	/> -->
<!-- <jslint options="white, bitwise, undef, regexp, newcap, laxbreak" failureProperty="jsLint.failure" 
	haltOnFailure="false"> -->
<!-- <formatter type="xml" destfile="${report-client-user.dir}/jslint.xml" 
	/> -->
<!-- <formatter type="plain" destfile="${report-client-user.dir}/jslint.out" 
	/> -->
<!-- <fileset dir="${client-user.dir}" includes="**/*.js" excludes="**/livegrid/dependencies/Ext.ux.livegrid/*" 
	/> -->
<!-- </jslint> -->
<!-- <echo message="[End] jsLint Results = ${jsLint.failure}" /> -->
<!-- </target> -->

<!-- ========================================================================================= 
	TARGETS POUR VALIDATION JSLINT ADMIN ========================================================================================= -->

<!-- <target name="jslint-admin-init"> -->
<!-- <echo message="[init] jslint = ${jslint}" /> -->
<!-- <mkdir dir="${report-client-admin.dir}" /> -->
<!-- <delete includeemptydirs="true"> -->
<!-- <fileset dir="${report-client-admin.dir}" includes="**/*" /> -->
<!-- </delete> -->
<!-- </target> -->
<!---->
<!-- <target name="jslint-admin"> -->
<!-- <echo message="[Running] jsLint validation tests on Folder ${client-admin.dir}" 
	/> -->
<!-- <jslint options="white, bitwise, undef, regexp, newcap, laxbreak" failureProperty="jsLint.failure" 
	haltOnFailure="false"> -->
<!-- <formatter type="xml" destfile="${report-client-admin.dir}/jslint.xml" 
	/> -->
<!-- <formatter type="plain" destfile="${report-client-admin.dir}/jslint.out" 
	/> -->
<!-- <fileset dir="${client-admin.dir}" includes="**/*.js" /> -->
<!-- </jslint> -->
<!-- <echo message="[End] jsLint Results = ${jsLint.failure}" /> -->
<!-- </target> -->

	
