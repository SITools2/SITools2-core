/*******************************************************************************
 * Copyright 2010-2014 CNES - CENTRE NATIONAL d'ETUDES SPATIALES
 *
 * This file is part of SITools2.
 *
 * SITools2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SITools2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with SITools2.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package fr.cnes.sitools.resources.order;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.restlet.Context;
import org.restlet.Request;
import org.restlet.data.Method;
import org.restlet.data.Parameter;
import org.restlet.data.Reference;
import org.restlet.data.Status;
import org.restlet.engine.util.DateUtils;
import org.restlet.representation.ObjectRepresentation;
import org.restlet.representation.Representation;
import org.restlet.representation.Variant;
import org.restlet.resource.ResourceException;
import org.restlet.security.User;

import fr.cnes.sitools.common.SitoolsSettings;
import fr.cnes.sitools.common.application.ContextAttributes;
import fr.cnes.sitools.common.application.SitoolsApplication;
import fr.cnes.sitools.common.exception.SitoolsException;
import fr.cnes.sitools.common.resource.SitoolsParameterizedResource;
import fr.cnes.sitools.mail.model.Mail;
import fr.cnes.sitools.order.model.Order;
import fr.cnes.sitools.resources.order.utils.ListReferencesAPI;
import fr.cnes.sitools.resources.order.utils.OrderAPI;
import fr.cnes.sitools.resources.order.utils.OrderResourceUtils;
import fr.cnes.sitools.server.Consts;
import fr.cnes.sitools.tasks.TaskUtils;
import fr.cnes.sitools.tasks.business.Task;
import fr.cnes.sitools.util.RIAPUtils;
import fr.cnes.sitools.util.TemplateUtils;
import fr.cnes.sitools.util.Util;

/**
 * Abstract Resource to handle Orders
 * <p>
 * Developer must implement
 * <p>
 * public abstract ListReferencesAPI listFilesToOrder(DatabaseRequest dbRequest)
 * throws SitoolsException;
 * </p>
 * and
 * <p>
 * public abstract Representation processOrder(ListReferencesAPI listReferences)
 * throws SitoolsException;
 * </p>
 * 
 * 
 * @author m.gond
 */
public abstract class AbstractOrderResource extends SitoolsParameterizedResource implements IOrderResource {

  /** The {@link Order} model object */
  protected Order order;
  /** The {@link Task} object */
  protected Task task;

  /** The {@link SitoolsSettings} */
  protected SitoolsSettings settings;
  /** The name of the folder where the current order files will be stored */
  protected String folderName;
  /** The formated date of the task */
  protected String formatedDate;
  /** The fileName to use in all created file during the order process */
  protected String fileName;

  /** The Sitools style user details */
  private fr.cnes.sitools.security.model.User userDetails;

  @Override
  public void doInit() {
    super.doInit();
  }

  /**
   * Principal method of the OrderResource Basically calls the 3 main methods
   * and return the result
   * 
   * @return the Representation generated by the executeOrder method
   */
  private Representation handleOrder() {
    try {
      /** create a new Order and initialize the context */
      initialiseOrder();
      /** execute the order */
      Representation result = executeOrder();
      /** terminate the order and notify administrator */
      terminateOrder();
      return result;
    }
    catch (Exception e) {
      throw new ResourceException(Status.SERVER_ERROR_INTERNAL, e.getMessage(), e);
    }
  }

  @Override
  public final Representation orderPost(Representation represent, Variant variant) {
    return handleOrder();
  }

  @Override
  public final Representation orderGet(Variant variant) {
    return handleOrder();
  }

  /**
   * First step of the order, Initialize it
   * 
   * @throws Exception
   *           if there is any error
   */
  public void initialiseOrder() throws Exception {
    task = (Task) getContext().getAttributes().get(TaskUtils.TASK);

    settings = (SitoolsSettings) getContext().getAttributes().get(ContextAttributes.SETTINGS);
    checkUser();

    fileName = getFileName();

    doInitialiseOrder();

  }

  /**
   * Execute the order
   * 
   * @return a {@link Representation} result of the order or null if the result
   *         is stored on the server
   * @throws SitoolsException
   *           if there is any error
   */
  public Representation executeOrder() throws SitoolsException {
    OrderAPI.activateOrder(order, getContext());
    ListReferencesAPI listFile = null;
    listFile = listFilesToOrder();
    // copy the listFile to admin storage
    String orderFileListName = fileName;
    if (orderFileListName == null || "".equals(orderFileListName)) {
      orderFileListName = OrderResourceUtils.FILE_LIST_PATTERN.replace("{orderName}", getOrderName());
      orderFileListName = orderFileListName.replace("{timestamp}", formatedDate);
    }

    try {
      Reference urlAdminIndex = listFile.copyToAdminStorage(getContext(), folderName, orderFileListName, getRequest()
          .getClientInfo());

      ArrayList<String> orderedAdminResource = new ArrayList<String>();
      orderedAdminResource.add(settings.getPublicHostDomain() + settings.getString(Consts.APP_URL) + urlAdminIndex);
      order.setAdminResourceCollection(orderedAdminResource);
      order = OrderAPI.updateOrder(order, getContext());

      Representation result = processOrder(listFile);
      return result;
    }
    catch (IOException e) {
      throw new SitoolsException("Error while creating the file index in the admin storage", e);
    }

  }

  /**
   * Last step of the order, terminate it and notify the administrator
   * 
   * @throws SitoolsException
   *           if there is any error
   */
  public void terminateOrder() throws SitoolsException {
    doTerminateOrder();
    notifyAdminEnd();
  }

  /**
   * Actual method to initialize the order. This method can be overridden to
   * change the order initialisation
   * 
   * @throws SitoolsException
   *           if there is an error while creating the order
   */
  public void doInitialiseOrder() throws SitoolsException {
    task.setCustomStatus("CREATING ORDER MODEL OBJECT");
    Date startDate = task.getStartDate();
    formatedDate = DateUtils.format(startDate, TaskUtils.getTimestampPattern());
    String orderDescription = fileName;
    order = OrderAPI.createOrder(task.getUserId(), getContext(), orderDescription);

    // folderName =
    // OrderResourceUtils.DIRECTORY_PATTERN.replace("{datasetName}",
    // ds.getName());
    // folderName = folderName.replace("{timestamp}", formatedDate);
    folderName = "/" + getFileName();

  }

  /**
   * Abstract method to list all the files to order.
   * 
   * @return a {@link ListReferencesAPI} containing the list of Reference to
   *         order
   * @throws SitoolsException
   *           if there is any error
   */
  public abstract ListReferencesAPI listFilesToOrder() throws SitoolsException;

  /**
   * Process the list of files to order
   * 
   * @param listReferences
   *          the {@link ListReferencesAPI} containing the list of Reference to
   *          order
   * @return a {@link Representation} or null if the response is stored on the
   *         server
   * @throws SitoolsException
   *           if there is any error
   */
  public abstract Representation processOrder(ListReferencesAPI listReferences) throws SitoolsException;

  /**
   * Return the name of the order
   * 
   * @return the name of the order
   */
  public abstract String getOrderName();

  /**
   * Terminate the order. This method can be overridden in order to change the
   * last step of the order
   * 
   * @throws SitoolsException
   *           is there is any error
   */
  public void doTerminateOrder() throws SitoolsException {
    order = OrderAPI.updateOrder(order, getContext());
    if (!"failed".equals(order.getStatus())) {
      order = OrderAPI.terminateOrder(order, getContext());
    }
    // task.setCustomStatus(null);
  }

  /**
   * Notify the administrator. Can be overridden to change default behaviour
   * 
   * @throws SitoolsException
   *           if here is any error
   */
  public void notifyAdminEnd() throws SitoolsException {
    try {
      this.sendMail(order, getContext(), userDetails, task);
    }
    catch (SitoolsException e) {
      // ne rien faire si le mail n'est pas parti
      OrderAPI.createEvent(order, getContext(), "MAIL_NOT_SEND_TO_USER");
    }
  }

  /**
   * Check that the user is allowed to do the order Throw a ResourceException to
   * stop the order execution Can be overridden to change default behaviour
   */
  public void checkUser() {
    // *******************************************************
    // Getting the user, if there is no user we raise an error

    User user = getClientInfo().getUser();
    if (user == null) {
      throw new ResourceException(Status.CLIENT_ERROR_FORBIDDEN, "USER MUST BE LOGGED");
    }

    // getting user details
    try {
      userDetails = this.getUserDetails(user.getIdentifier(), getContext());
      if (userDetails == null) {
        throw new ResourceException(Status.CLIENT_ERROR_FORBIDDEN, "USER MUST BE LOGGED can't find User details ");
      }
    }
    catch (SitoolsException e) {
      throw new ResourceException(Status.CLIENT_ERROR_FORBIDDEN, "USER MUST BE LOGGED can't find User details ");
    }
  }

  /**
   * Gets the user details from its id
   * 
   * @param id
   *          the id of the user
   * @param context
   *          the context
   * @return a User object with full details
   * @throws SitoolsException
   *           when an error append
   */
  protected fr.cnes.sitools.security.model.User getUserDetails(String id, Context context) throws SitoolsException {
    SitoolsApplication app = (SitoolsApplication) context.getAttributes().get(TaskUtils.PARENT_APPLICATION);
    return RIAPUtils.getObject(id, app.getSettings().getString(Consts.APP_SECURITY_URL) + "/users", context);
  }

  /**
   * Send a mail to inform the user that the order is finished
   * 
   * @param order
   *          the order
   * @param context
   *          the context
   * @param user
   *          the user
   * @param task
   *          the Task
   * @throws SitoolsException
   *           if something goes wrong
   */
  protected void sendMail(Order order, Context context, fr.cnes.sitools.security.model.User user, Task task)
      throws SitoolsException {

    List<String> toList = new ArrayList<String>();
    String userAdd = user.getEmail();
    if (userAdd != null && !userAdd.equals("")) {
      // System.out.println("EMAIL ADDRESS = " + userAdd);
      toList.add(userAdd);

      Mail mailToUser = new Mail();
      mailToUser.setToList(toList);

      // TODO EVOL : email subject should be a parameter
      mailToUser.setSubject(getMailSubject());

      // default body
      mailToUser.setBody(getMailBody(mailToUser));

      org.restlet.Response sendMailResponse = null;
      try {
        // riap request to MailAdministration application
        Request request = new Request(Method.POST, RIAPUtils.getRiapBase()
            + settings.getString(Consts.APP_MAIL_ADMIN_URL), new ObjectRepresentation<Mail>(mailToUser));

        sendMailResponse = getContext().getClientDispatcher().handle(request);
      }
      catch (Exception e) {
        getLogger().warning("SERVER ERROR SENDING EMAIL TO USER");
        throw new ResourceException(Status.SERVER_ERROR_INTERNAL, e);
      }
      if (sendMailResponse.getStatus().isError()) {
        throw new SitoolsException("SERVER ERROR SENDING EMAIL TO USER");
      }

      // OK
    }
    else {
      throw new SitoolsException("NO EMAIL ADDRESS DEFINED");
    }
  }

  /**
   * Get the mail body
   * 
   * @param mailToUser
   *          the mail
   * @return the mail body
   */
  protected String getMailBody(Mail mailToUser) {
    // default body
    String mailBody = "Your command is complete <br/>" + "Name : " + order.getName() + "<br/>" + "Description : "
        + order.getDescription() + "<br/>" + "Check the status at :" + task.getStatusUrl() + "<br/>"
        + "Get the result at :" + task.getUrlResult();

    // use a freemarker template for email body with Mail object
    String templatePath = settings.getRootDirectory() + settings.getString(Consts.TEMPLATE_DIR)
        + "mail.order.complete.ftl";

    Map<String, Object> root = new HashMap<String, Object>();
    root.put("mail", mailToUser);
    root.put("order", order);
    String adminmail = settings.getString("Starter.StatusService.CONTACT_MAIL");
    root.put("adminmail", adminmail);
    root.put("user", userDetails);
    root.put("task", task);
    root.put(
        "sitoolsUrl",
        getSettings().getPublicHostDomain() + settings.getString(Consts.APP_URL)
            + settings.getString(Consts.APP_CLIENT_USER_URL) + "/");

    TemplateUtils.describeObjectClassesForTemplate(templatePath, root);

    root.put("context", getContext());

    String body = TemplateUtils.toString(templatePath, root);
    if (Util.isNotEmpty(body)) {
      return body;
    }
    else {
      return mailBody;
    }
  }

  /**
   * Get mail subject
   * 
   * @return the mail subject
   */
  protected String getMailSubject() {
    return "SITools2 - Order " + order.getDescription() + " " + order.getStatus();
  }

  /**
   * Get the fileName from the request or the model.
   * 
   * @return the fileName from the request or the model.
   */
  public String getFileName() {
    String localFileName;
    Parameter fileNameUserInput = getRequest().getResourceRef().getQueryAsForm().getFirst("fileName");
    if (fileNameUserInput != null && !"".equals(fileNameUserInput.getValue())) {
      localFileName = fileNameUserInput.getValue();
    }
    else {
      localFileName = getParameterValue("fileName");
      if (localFileName == null || "".equals(localFileName)) {
        localFileName = OrderResourceUtils.FILE_LIST_PATTERN.replace("{orderName}", getOrderName()).replace(
            "{timestamp}", formatedDate);
      }
    }
    return localFileName;
  }

}
