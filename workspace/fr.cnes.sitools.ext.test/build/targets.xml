<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- =================================== == Copyright 2010-2014 CNES - CENTRE 
	NATIONAL d'ETUDES SPATIALES == == This file is part of SITools2. == == SITools2 
	is free software: you can redistribute it and/or modify == it under the terms 
	of the GNU General Public License as published by == the Free Software Foundation, 
	either version 3 of the License, or == (at your option) any later version. 
	== == SITools2 is distributed in the hope that it will be useful, == but 
	WITHOUT ANY WARRANTY; without even the implied warranty of == MERCHANTABILITY 
	or FITNESS FOR A PARTICULAR PURPOSE. See the == GNU General Public License 
	for more details. == == You should have received a copy of the GNU General 
	Public License == along with SITools2. If not, see <http://www.gnu.org/licenses/>. 
	==================================== -->
<!-- <path id="compile.classpath"> -->
<!-- <pathelement location="${comp.wp.dir}/org.restlet.patched/org.restlet.patched_1.0.1.jar"/> -->
<!-- <pathelement location="${comp.cp.dir}/fr.cnes.sitools.core.jar" /> -->
<!-- <pathelement location="${comp.lib.dir}/javax.measure_0.9.5/javax.measure_0.9.5.jar" 
	/> -->
<!-- <fileset dir="${cots.dir}/restlet-2.0.5-patched"> -->
<!-- <include name="**/*.jar" /> -->
<!-- <include name="**/*.zip" /> -->
<!-- </fileset> -->
<!-- </path> -->

<target name="prepare-extensions">
	<!-- Creation des repertoires dist.dir et out.jar.dir -->
	<mkdir dir="${dist.dir}" />
</target>


<target name="compile-extensions">
	<javac srcdir="./src" debug="${debug}" deprecation="${deprecation}"
		optimize="${optimize}" encoding="${encoding}" includeAntRuntime="false"
		destdir="${out.classes.dir}">
		<classpath refid="compile.classpath" />
	</javac>
	
	<copy todir="${out.classes.dir}">
		<fileset dir="${src.dir}">
			<patternset refid="all.resource.files" />
		</fileset>
	</copy>
</target>

<target name="jar-extensions">
	<delete file="modules.jar" />
	<property name="version.num" value="1.00" />
	<buildnumber file="build.num" />
	<jar jarfile="${dist.dir}/${project.name}.jar" basedir="${out.classes.dir}"
		includes="**/*.class" excludes="**/*Helper">
		<metainf dir="${out.classes.dir}/META-INF">
			<include name="**/*Helper" />
		</metainf>
	</jar>
</target>

<target name="cleanup-extensions">
<!--	<delete>-->
<!--		<fileset dir="." includes="**/*.class" />-->
<!--	</delete>-->

</target>

<!--<target name="deploy-jar-extensions"> -->
<!-- Deploiement du JAR de l'extension -->
<!-- <echo message="- Deploiement du JAR de l'extension -" /> <copy todir="${out.jar.dir}"> 
	<fileset dir="${dist.lib.dir}" /> </copy> </target> -->


<!-- ========================================================================================= 
	test-init : Creation de l'arborescence pour les tests ========================================================================================= -->
<target name="test-init">
	<mkdir dir="${test.dir}" />
	<delete dir="${test.reports.data.dir}" />
	<delete dir="${test.reports.dir}" />
	<mkdir dir="${test.reports.dir}" />
	<mkdir dir="${test.reports.data.dir}" />
</target>

<!-- ========================================================================================= 
	test-compile : Compilation des TestCase JUnit et des classes de tests ========================================================================================= -->
<target name="test-compile">
	<!-- Compile tests -->
	<javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
		debug="${debug}" deprecation="${deprecation}" optimize="${optimize}"
		includeAntRuntime="false">

		<classpath>
			<path refid="test.classpath" />
		</classpath>
	</javac>

	<!-- Copie les ressources des tests dans le repertoire ${test.conf.dir} -->
	<copy todir="${test.conf.dir}" includeemptydirs="false">
		<fileset dir="${test.src.dir}" excludes="**/*.java" />
	</copy>
</target>

<property name="test.last.failed.file" location="${test.dir}/.lasttestsfailed" />

<!-- ========================================================================================= 
	test : Execution des Tests JUnit et generation du rapport de test ========================================================================================= -->
<target name="test"
	description="Execution des tests JUnit et generation du rapport de test">
	<echo level="info" message="" />

	<!-- Execute les tests JUnit -->
	<junit printsummary="yes" errorProperty="test.failed"
		failureProperty="test.failed" fork="yes" dir="${basedir}">
		<sysproperty key="net.sourceforge.cobertura.datafile"
			file="cobertura.ser" />
		<classpath refid="instrumented.classpath" />
		<classpath refid="test.classpath" />
		<formatter type="brief" usefile="false" />
		<formatter type="xml" />
		<test name="${testcase}" if="testcase" />
		<batchtest todir="${test.reports.data.dir}" unless="testcase">
			<fileset dir="${test.classes.dir}" includes="**/ext/test/**/Test*.class"
				excludes="**/Abstract*.class **/TestRunner.class" />
			<fileset dir="${test.classes.dir}" includes="**/ext/test/**/*Test.class"
				excludes="**/Abstract*.class" />
			<fileset dir="${test.classes.dir}" includes="**/ext/test/**/*TestCase.class"
				excludes="**/Abstract*.class" />
		</batchtest>
	</junit>

	<junitreport todir="${test.reports.data.dir}">
		<fileset dir="${test.reports.data.dir}">
			<include name="TEST-*.xml" />
		</fileset>
		<report format="frames" todir="${test.reports.dir}" />
	</junitreport>

	<echo message="last build failed tests" file="${test.last.failed.file}" />
	<fail if="test.failed">
		Unit tests failed. Check log or reports for details
	</fail>

	<!-- Remove test failed file, as these tests succeeded -->
	<delete file="${test.last.failed.file}" />
</target>

<!-- Classpath of the files to instrument -->
<path id="instrument.classpath">
	<fileset dir="${out.classes.dir}">
		<include name="**/*.class" />
	</fileset>
</path>

<!-- Defines the directory where to find the instrumented classes -->
<path id="instrumented.classpath">
	<pathelement location="${instrumented.dir}" />
</path>

<target name="instrumentClasses" depends="build-extensions">
	<delete dir="${cobertura.reports.dir}" />
	<mkdir dir="${cobertura.reports.dir}" />
	<path refid="test" />
	<cobertura-instrument todir="${instrumented.dir}"
		datafile="cobertura.ser">
		<ignore regex="org.apache.log4j.*" />
		<fileset dir="${out.classes.dir}">
			<include name="**/*.class" />
			<exclude name="**/*Test.class" />
		</fileset>
	</cobertura-instrument>
</target>

<target name="coverage" depends="instrumentClasses, execute-tests-ext">
	<cobertura-report format="html" srcdir="${src.dir}"
		destdir="${cobertura.reports.dir}" datafile="cobertura.ser" />
	<cobertura-report format="xml" srcdir="${src.dir}"
		destdir="${cobertura.reports.dir}" datafile="cobertura.ser" />
</target>

<target name="audit" description="Generates a report of code convention violations.">

	<delete dir="${checkstyle.reports.dir}" />
	<delete dir="${pmd.reports.dir}" />
	<delete dir="${cpd.reports.dir}" />

	<mkdir dir="${checkstyle.reports.dir}" />
	<mkdir dir="${pmd.reports.dir}" />
	<mkdir dir="${cpd.reports.dir}" />

	<!-- Audit CHECKSTYLE -->
	<checkstyle config="${audit.checkstyle.rules.dir}/AKKA-CheckStyle.xml"
		failureProperty="checkstyle.failure" failOnViolation="false">
		<formatter type="xml"
			tofile="${checkstyle.reports.dir}/checkstyle_report.xml" />
		<fileset dir="${src.dir}" includes="**/*.java" />
	</checkstyle>
	<xslt in="${checkstyle.reports.dir}/checkstyle_report.xml" out="${checkstyle.reports.dir}/checkstyle_report.html"
		style="${audit.xsl.dir}/${checkstyle.xsl}" />

	<!-- Audit PMD -->
	<pmd rulesetfiles="${audit.pmd.rules.dir}/AKKA-PMD.xml">
		<formatter type="xml" toFile="${pmd.reports.dir}/pmd_report.xml" />
		<fileset dir="${src.dir}">
			<include name="**/*.java" />
		</fileset>
	</pmd>

	<!-- Audit CPD -->
	<cpd minimumTokenCount="100" outputFile="${cpd.reports.dir}/cpd_report.xml"
		format="xml">
		<fileset dir="${src.dir}">
			<include name="**/*.java" />
		</fileset>
	</cpd>

</target>

<!-- ========================================================================================= 
	init : Target d'initialisation. Elle doit etre appelee par toute les autres 
	targets. ========================================================================================= -->
<target name="init">
	<!-- Permet d'utiliser les valeurs ${TSTAMP}, ${DSTAMP}, ... dans les targets 
		si necessaires -->
	<tstamp />

	<!-- Affichage des parametres courant lors de l'execution de la tache Ant. -->
	<echo message="--------- ${project.fullname} ${project.version} ---------" />
	<echo message="" />

	<echo message="java.class.path    = ${java.class.path}" />
	<echo message="" />
	<echo message="java.home          = ${java.home}" />
	<echo message="user.home          = ${user.home}" />
	<echo message="" />
	<echo message="basedir            = ${basedir}" />
	<echo message="" />
	<echo message="compile.classpath  = ${toString:compile.classpath}" />

	<!-- Definition des filtres qui permettront de remplacer des token dans 
		les fichiers sources -->
	<!-- Les tokens seront de la forme suivante : @token@ dans les sources. 
		Et ils seront -->
	<!-- automatiquement remplaces par la valeur definie ci-dessous par Ant 
		lors de l'execution -->
	<!-- d'une tache ayant comme parametre : filtering="on" -->
	<filter token="project" value="${project.fullname}" />
	<filter token="version" value="${project.version}" />
	<filter token="year" value="${year}" />
	<filter token="author" value="${author}" />
</target>

<!-- ========================================================================================= 
	clean : Supprime les fichiers generes et les fichiers bak et de log. ========================================================================================= -->
<target name="clean">
	<!-- Supprime tous les fichiers temporaires de l'arborescance projet -->
	<delete>
		<fileset dir=".">
			<patternset refid="all.tmp.files" />
		</fileset>
	</delete>

	<!-- Vide le repertoire "out" -->
	<delete dir="${out.classes.dir}" />
	<mkdir dir="${out.classes.dir}" />
</target>

<!-- ========================================================================================= 
	prepare : Prepare le repertoire "out" en y copiant les fichiers sources filtres. 
	========================================================================================= -->
<target name="prepare">
	<!-- Creation des repertoires dist.dir et out.classes.dir -->
	<mkdir dir="${out.classes.dir}" />
	<mkdir dir="${lib.dir}" />

	<mkdir dir="${dist.dir}" />
</target>

<path id="javadoc">
	<pathelement location="${src.dir}" />	
</path>

<target name="javadoc">

	<!-- Suppression de l'ancien repertoire out.javadoc.dir -->
	<delete dir="${out.javadoc.dir}/sources" />

	<!-- Creation du repertoire out.javadoc.dir -->
	<mkdir dir="${out.javadoc.dir}/sources" />

	<!-- Generation de la javadoc du projet -->
	<javadoc sourcepathref="javadoc" packagenames="${project.packagenames}.*"
		destdir="${out.javadoc.dir}/sources" author="true" public="true"
		version="true" use="true" windowtitle="${project.fullname} ${project.version}"
		doctitle="${project.fullname} ${project.version}"
		bottom="Copyright &amp;copy; ${year} ${author}. All Rights Reserved.">
		<classpath>
			<path>
				<fileset dir="${cots.dir}/restlet-2.0.5-patched">
					<include name="**/*.jar" />
				</fileset>
			</path>
			<path>
				<fileset dir="${ROOT_DIRECTORY}/workspace/libraries">
					<include name="**/*.jar" />
				</fileset>
			</path>
			<path>
				<fileset dir="${ROOT_DIRECTORY}/workspace/org.restlet.ext.solr">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</classpath>
	</javadoc>

	<!-- Creation du ZIP contenant la javadoc du projet -->
	<zip zipfile="${dist.dir}/${project.name}-doc-${project.version}.zip"
		basedir="${out.javadoc.dir}" />

	<!-- Suppression du repertoire out.javadoc.dir -->
	<!-- delete dir="${out.javadoc.dir}"/ -->
</target>

<target name="javadoc-tests">

	<!-- Suppression de l'ancien repertoire out.javadoc.dir -->
	<delete dir="${out.javadoc.dir}/tests" />

	<!-- Creation du repertoire out.javadoc.dir -->
	<mkdir dir="${out.javadoc.dir}/tests" />

	<!-- Generation de la javadoc du projet -->
	<javadoc sourcepath="${test.src.dir}" packagenames="${project.packagenames}.*"
		destdir="${out.javadoc.dir}/tests" author="true" public="true"
		version="true" use="true" windowtitle="${project.fullname} ${project.version}"
		doctitle="${project.fullname} ${project.version}"
		bottom="Copyright &amp;copy; ${year} ${author}. All Rights Reserved.">
		<link href="http://localhost:8182/sitools/developer/javadoc"
			packagelistloc="." />
		<link offline="true" href="http://www.restlet.org/documentation/2.0/jse/api/"
			packagelistloc="${cots.dir}/restlet-jse-2.0snapshot/docs/api" />
		<link offline="true" href="http://xstream.codehaus.org"
			packagelistloc="http://xstream.codehaus.org/javadoc/" />
		<link offline="true" href="http://www.junit.org/" packagelistloc="${cots.dir}/junit/junit4.8.2/javadoc" />
		<classpath>
			<pathelement path="${java.class.path}" />
			<pathelement path="${servlet.jar}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
			<fileset dir="${cots.dir}/restlet-2.0.5-patched">
				<include name="**/*.jar" />
				<include name="**/*.zip" />
			</fileset>
		</classpath>
	</javadoc>

	<!-- Creation du ZIP contenant la javadoc du projet -->
	<zip
		zipfile="${dist.dir}/${project.name}-doc-tests-${project.version}-${DSTAMP}.zip"
		basedir="${out.javadoc.dir}/tests" />

	<!-- Suppression du repertoire out.javadoc.dir -->
	<!-- delete dir="${out.javadoc.dir}"/ -->
</target>
